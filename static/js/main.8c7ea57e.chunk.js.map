{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IconToolbarWrapper","styled","div","Form","form","IconToolbar","className","href","target","rel","App","id","type","name","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8iBAOA,IAAMA,EAAqBC,IAAOC,IAAV,KAOlBC,EAAOF,IAAOG,KAAV,KAOV,SAASC,IACP,OACE,kBAACL,EAAD,KACE,uBACEM,UAAU,uBACVC,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,mBAEf,uBACEA,UAAU,wBACVC,KAAK,qDACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,oBAEf,uBACEA,UAAU,wBACVC,KAAK,qCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,oBAEf,uBACEA,UAAU,0BACVC,KAAK,oDACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,wBAEf,uBACEA,UAAU,uBACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,mBAEf,uBACEA,UAAU,yBACVC,KAAK,8CACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,qBAEf,uBACEA,UAAU,sBACVC,KAAK,0CACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,kBAEf,uBACEA,UAAU,yBACVC,KAAK,kEACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGH,UAAU,sBA6BNI,MAvBf,WAGE,OACE,yBAAKC,GAAG,OACN,4BAAQA,GAAG,UAEP,oCACE,2CACA,kBAACR,EAAD,KACE,2BAAOS,KAAK,OAAOD,GAAG,SAASE,KAAK,SAASC,MAAM,WAErD,6BACA,kBAACT,EAAD,UC7FQU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c7ea57e.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction Loading() {\n  return <i className=\"fas fa-spinner loading\" />;\n}\n\nconst IconToolbarWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 300px;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction IconToolbar() {\n  return (\n    <IconToolbarWrapper>\n      <a\n        className=\"animated_icon_google\"\n        href=\"https://www.google.com/search?q=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-google\" />\n      </a>\n      <a\n        className=\"animated_icon_youtube\"\n        href=\"https://www.youtube.com/results?search_query=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-youtube\" />\n      </a>\n      <a\n        className=\"animated_icon_twitter\"\n        href=\"https://twitter.com/search?q=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-twitter\" />\n      </a>\n      <a\n        className=\"animated_icon_wikipedia\"\n        href=\"https://en.wikipedia.org/w/index.php?search=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-wikipedia-w\" />\n      </a>\n      <a\n        className=\"animated_icon_reddit\"\n        href=\"https://www.reddit.com/search/?q=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-reddit\" />\n      </a>\n      <a\n        className=\"animated_icon_facebook\"\n        href=\"https://www.facebook.com/search/top?q=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-facebook\" />\n      </a>\n      <a\n        className=\"animated_icon_yahoo\"\n        href=\"https://search.yahoo.com/search?p=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-yahoo\" />\n      </a>\n      <a\n        className=\"animated_icon_linkedin\"\n        href=\"https://www.linkedin.com/search/results/content/?keywords=hello\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-linkedin\" />\n      </a>\n    </IconToolbarWrapper>\n  );\n}\n\nfunction App() {\n  const isReady = true;\n\n  return (\n    <div id=\"app\">\n      <header id=\"header\">\n        {isReady ? (\n          <>\n            <h1>Mentionaire</h1>\n            <Form>\n              <input type=\"text\" id=\"search\" name=\"search\" value=\"Hello\" />\n            </Form>\n            <br />\n            <IconToolbar />\n          </>\n        ) : (\n          <Loading />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}